using System;
using NamelessRogue.shell;
using NamelessRogue.Engine.Serialization;
using System.Collections.Generic;
using SharpDX;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using Newtonsoft.Json;
using System.Diagnostics;
using RogueSharp.Random;
using NamelessRogue.Engine.Utility;
using NamelessRogue.Engine.Generation;
using NamelessRogue.Engine.Components.ChunksAndTiles;
using NamelessRogue.Engine.Generation.World;
using NamelessRogue.Engine.Components.Rendering;
using FlatSharp;
using NamelessRogue.Engine.Serialization.AutogeneratedSerializationClasses;
using NamelessRogue.Engine.Components.Physical;
using SharpDX.D3DCompiler;
using SharpDX.Direct3D;
using SharpDX.Direct3D11;
using SharpDX.DXGI;
using SharpDX.Windows;
using Color = SharpDX.Color;
using Buffer = SharpDX.Direct3D11.Buffer;
using Device = SharpDX.Direct3D11.Device;

namespace NamelessRogue
{
    /// <summary>
    /// The main class.
    /// </summary>
    public static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            //SerializationCodeGenerator.GenerateStorages(typeof(ConsoleCamera));
            //return;
            using (var game = new NamelessGame())
            {
                game.Run();
            }
        //    var form = new RenderForm("SharpDX - MiniTri Direct3D 11 Sample");

        //    // SwapChain description
        //    var desc = new SwapChainDescription()
        //    {
        //        BufferCount = 1,
        //        ModeDescription =
        //                           new ModeDescription(form.ClientSize.Width, form.ClientSize.Height,
        //                                               new Rational(60, 1), Format.R8G8B8A8_UNorm),
        //        IsWindowed = true,
        //        OutputHandle = form.Handle,
        //        SampleDescription = new SampleDescription(1, 0),
        //        SwapEffect = SwapEffect.Discard,
        //        Usage = Usage.RenderTargetOutput
        //    };

        //    // Create Device and SwapChain
        //    Device device;
        //    SwapChain swapChain;
        //    Device.CreateWithSwapChain(DriverType.Hardware, DeviceCreationFlags.None, desc, out device, out swapChain);
        //    var context = device.ImmediateContext;

        //    // Ignore all windows events
        //    var factory = swapChain.GetParent<Factory>();
        //    factory.MakeWindowAssociation(form.Handle, WindowAssociationFlags.IgnoreAll);

        //    // New RenderTargetView from the backbuffer
        //    var backBuffer = Texture2D.FromSwapChain<Texture2D>(swapChain, 0);
        //    var renderView = new RenderTargetView(device, backBuffer);

        //    // Compile Vertex and Pixel shaders
        //    var vertexShaderByteCode = ShaderBytecode.CompileFromFile("Content\\MiniTri.fx", "VS", "vs_4_0", ShaderFlags.None, EffectFlags.None);
        //    var vertexShader = new VertexShader(device, vertexShaderByteCode);

        //    var pixelShaderByteCode = ShaderBytecode.CompileFromFile("Content\\MiniTri.fx", "PS", "ps_4_0", ShaderFlags.None, EffectFlags.None);
        //    var pixelShader = new PixelShader(device, pixelShaderByteCode);

        //    // Layout from VertexShader input signature

        //    context.OutputMerger.SetTargets(renderView);

        //    // Main loop
        //    RenderLoop.Run(form, () =>
        //    {
        //        context.ClearRenderTargetView(renderView, Color.Black);
        //        context.Draw(3, 0);
        //        swapChain.Present(0, PresentFlags.None);
        //    });

        //    // Release all resources
        //    vertexShaderByteCode.Dispose();
        //    vertexShader.Dispose();
        //    pixelShaderByteCode.Dispose();
        //    pixelShader.Dispose();
        //    vertices.Dispose();
        //    layout.Dispose();
        //    renderView.Dispose();
        //    backBuffer.Dispose();
        //    context.ClearState();
        //    context.Flush();
        //    device.Dispose();
        //    context.Dispose();
        //    swapChain.Dispose();
        //    factory.Dispose();
      }
    }
}
