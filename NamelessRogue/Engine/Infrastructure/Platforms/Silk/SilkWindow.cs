using Microsoft.VisualBasic.Devices;
using NamelessRogue.Engine.Components.Physical;
using NamelessRogue.Engine.Utility;
using Silk.NET.Input;
using Silk.NET.Maths;
using Silk.NET.Windowing;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NamelessRogue.Engine.Infrastructure.Platforms.Silk
{
    internal class SilkWindow : IWindowWrapper
    {

        private IWindow? window;
        private IInputContext input;
        private KeyboardState keyboardState = new KeyboardState();
        private MouseState mouseState;

        public string WindowName { get => window.Title; set => window.Title = value; }
        public int WindowWidth { get { return window.Size.X; } set { window.Size = new Vector2D<int>(value, window.Size.Y); } }
        public int WindowHeight { get { return window.Size.Y; } set { window.Size = new Vector2D<int>(window.Size.X, value); } }
        public Point Position { get { return new Point(window.Position.X, window.Position.Y); } set { window.Position = new Vector2D<int>(value.X, value.Y); } }
        public KeyboardState KeyboardState { get => keyboardState; set => keyboardState = value; }
        public MouseState MouseState {
            get => mouseState;
            set
            {
                mouseState = value;
                for (int i = 0; i < input.Mice.Count; i++)
                {
                    input.Mice[i].Position = new Vector2(value.Position.X, value.Position.Y);
                }
            }
        }

        public bool Fullscreen { get { return false; } set {} }

        public void Init(int width, int height, int posX, int posY, string name, bool isFullScreen, string iconPath)
        {
            var options = WindowOptions.DefaultVulkan with
            {
                Size = new Vector2D<int>(width, height),
                Title = name,
                IsVisible = true,
            };

            window = Window.Create(options);
            window.Initialize();

            window.Position = new Vector2D<int>(posX, posY);

            input = window.CreateInput();
            for (int i = 0; i < input.Keyboards.Count; i++)
                input.Keyboards[i].KeyDown += KeyDown;

            for (int i = 0; i < input.Mice.Count; i++)
            {
                var mouse = input.Mice[i];
                mouse.Click += SilkWindowMouse;
                mouse.DoubleClick += SilkWindowMouse;
                mouse.MouseDown += SilkWindowMouseUpDown;
                mouse.MouseUp += SilkWindowMouseUpDown;
                mouse.MouseMove += Mouse_MouseMove;
                mouse.Scroll += SilkWindow_Scroll;
            }
        }

        private void Mouse_MouseMove(IMouse mouse, System.Numerics.Vector2 position)
        {
            CaptureMouse(mouse);
        }

        private void SilkWindowMouseUpDown(IMouse mouse, MouseButton button)
        {
            CaptureMouse(mouse);
        }

        private void SilkWindow_Scroll(IMouse mouse, ScrollWheel wheel)
        {
            mouseState.MouseWheelDelta = (int)wheel.X;
        }

        private void SilkWindowMouse(IMouse mouse, MouseButton button, System.Numerics.Vector2 position)
        {
            CaptureMouse(mouse);
        }

        void CaptureMouse(IMouse mouse)
        {
            mouseState.LeftPressed = mouse.IsButtonPressed(MouseButton.Left);
            mouseState.RightPressed = mouse.IsButtonPressed(MouseButton.Right);
            mouseState.MiddlePressed = mouse.IsButtonPressed(MouseButton.Middle);
            mouseState.X = (int)mouse.Position.X;
            mouseState.Y = (int)mouse.Position.Y;
        }

        private void KeyDown(IKeyboard keyboard, global::Silk.NET.Input.Key key, int arg3)
        {
            KeyboardState = new KeyboardState();

            KeyboardState.Keys.Add(SilkKeyMapper.Map(key));
        }

        public void Show(int x, int y)
        {
            window.Position = new Vector2D<int>(x, y);
            window.IsVisible = true;
        } 
        
        public void Hide()
        {
            window.IsVisible = false;
        }

        public bool SetIcon(string iconPath)
        {
            return false;
          // window.SetWindowIcon()
        }

        public void Update()
        {
            mouseState = new MouseState();
            KeyboardState = new KeyboardState();
        }
    }

    //autogenerated
    public static class SilkKeyMapper 
    {
        private static readonly Dictionary<global::Silk.NET.Input.Key, Key> KeyMap = new()
        {
            { global::Silk.NET.Input.Key.Unknown, Key.None },
            { global::Silk.NET.Input.Key.Escape, Key.Escape },
            { global::Silk.NET.Input.Key.Enter, Key.Enter },
            { global::Silk.NET.Input.Key.Space, Key.Space },
            { global::Silk.NET.Input.Key.Tab, Key.Tab },
            { global::Silk.NET.Input.Key.Backspace, Key.Back },
            { global::Silk.NET.Input.Key.Delete, Key.Delete },
            { global::Silk.NET.Input.Key.Insert, Key.Insert },
            { global::Silk.NET.Input.Key.Left, Key.Left },
            { global::Silk.NET.Input.Key.Right, Key.Right },
            { global::Silk.NET.Input.Key.Up, Key.Up },
            { global::Silk.NET.Input.Key.Down, Key.Down },
            { global::Silk.NET.Input.Key.PageUp, Key.Prior },
            { global::Silk.NET.Input.Key.PageDown, Key.Next },
            { global::Silk.NET.Input.Key.Home, Key.Home },
            { global::Silk.NET.Input.Key.End, Key.End },
            { global::Silk.NET.Input.Key.F1, Key.F1 },
            { global::Silk.NET.Input.Key.F2, Key.F2 },
            { global::Silk.NET.Input.Key.F3, Key.F3 },
            { global::Silk.NET.Input.Key.F4, Key.F4 },
            { global::Silk.NET.Input.Key.F5, Key.F5 },
            { global::Silk.NET.Input.Key.F6, Key.F6 },
            { global::Silk.NET.Input.Key.F7, Key.F7 },
            { global::Silk.NET.Input.Key.F8, Key.F8 },
            { global::Silk.NET.Input.Key.F9, Key.F9 },
            { global::Silk.NET.Input.Key.F10, Key.F10 },
            { global::Silk.NET.Input.Key.F11, Key.F11 },
            { global::Silk.NET.Input.Key.F12, Key.F12 },
            { global::Silk.NET.Input.Key.A, Key.A },
            { global::Silk.NET.Input.Key.B, Key.B },
            { global::Silk.NET.Input.Key.C, Key.C },
            { global::Silk.NET.Input.Key.D, Key.D },
            { global::Silk.NET.Input.Key.E, Key.E },
            { global::Silk.NET.Input.Key.F, Key.F },
            { global::Silk.NET.Input.Key.G, Key.G },
            { global::Silk.NET.Input.Key.H, Key.H },
            { global::Silk.NET.Input.Key.I, Key.I },
            { global::Silk.NET.Input.Key.J, Key.J },
            { global::Silk.NET.Input.Key.K, Key.K },
            { global::Silk.NET.Input.Key.L, Key.L },
            { global::Silk.NET.Input.Key.M, Key.M },
            { global::Silk.NET.Input.Key.N, Key.N },
            { global::Silk.NET.Input.Key.O, Key.O },
            { global::Silk.NET.Input.Key.P, Key.P },
            { global::Silk.NET.Input.Key.Q, Key.Q },
            { global::Silk.NET.Input.Key.R, Key.R },
            { global::Silk.NET.Input.Key.S, Key.S },
            { global::Silk.NET.Input.Key.T, Key.T },
            { global::Silk.NET.Input.Key.U, Key.U },
            { global::Silk.NET.Input.Key.V, Key.V },
            { global::Silk.NET.Input.Key.W, Key.W },
            { global::Silk.NET.Input.Key.X, Key.X },
            { global::Silk.NET.Input.Key.Y, Key.Y },
            { global::Silk.NET.Input.Key.Z, Key.Z },
            { global::Silk.NET.Input.Key.Number0, Key.NumPad0 },
            { global::Silk.NET.Input.Key.Number1, Key.NumPad1 },
            { global::Silk.NET.Input.Key.Number2, Key.NumPad2 },
            { global::Silk.NET.Input.Key.Number3, Key.NumPad3 },
            { global::Silk.NET.Input.Key.Number4, Key.NumPad4 },
            { global::Silk.NET.Input.Key.Number5, Key.NumPad5 },
            { global::Silk.NET.Input.Key.Number6, Key.NumPad6 },
            { global::Silk.NET.Input.Key.Number7, Key.NumPad7 },
            { global::Silk.NET.Input.Key.Number8, Key.NumPad8 },
            { global::Silk.NET.Input.Key.Number9, Key.NumPad9 },
            { global::Silk.NET.Input.Key.KeypadAdd, Key.Add },
            { global::Silk.NET.Input.Key.KeypadSubtract, Key.Subtract },
            { global::Silk.NET.Input.Key.KeypadMultiply, Key.Multiply },
            { global::Silk.NET.Input.Key.KeypadDivide, Key.Divide },
            { global::Silk.NET.Input.Key.KeypadDecimal, Key.Decimal },
            { global::Silk.NET.Input.Key.ShiftLeft, Key.LShiftKey },
            { global::Silk.NET.Input.Key.ShiftRight, Key.RShiftKey },
            { global::Silk.NET.Input.Key.ControlLeft, Key.LControlKey },
            { global::Silk.NET.Input.Key.ControlRight, Key.RControlKey },
        };

        public static Key Map(global::Silk.NET.Input.Key sourceKey)
        {
            return KeyMap.TryGetValue(sourceKey, out var targetKey) ? targetKey : Key.None;
        }
    }
}
