
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FlatSharp.Attributes;
using NamelessRogue.Engine.Serialization.SerializationIfrastructure;
using NamelessRogue.Engine.Serialization.CustomSerializationClasses;
namespace NamelessRogue.Engine.Serialization.AutogeneratedSerializationClasses
{
    [FlatBufferTable]
    public class TimelineLayerStorage : IStorage<NamelessRogue.Engine.Generation.World.TimelineLayer>
    {
        [FlatBufferItem(0)] public string Id { get; set; }
        [FlatBufferItem(1)] public string ParentEntityId { get; set; }
        [FlatBufferItem(2)] public Int32 Age { get; set; }

        [FlatBufferItem(3)] public WorldTileStorage[,] WorldTiles { get; set; }

        [FlatBufferItem(4)] public List<CivilizationStorage> Civilizations { get; set; }

        [FlatBufferItem(5)] public List<RegionStorage> Continents { get; set; }

        [FlatBufferItem(6)] public List<RegionStorage> Islands { get; set; }

        [FlatBufferItem(7)] public List<RegionStorage> Mountains { get; set; }

        [FlatBufferItem(8)] public List<RegionStorage> Forests { get; set; }

        [FlatBufferItem(9)] public List<RegionStorage> Deserts { get; set; }

        [FlatBufferItem(10)] public List<RegionStorage> Swamps { get; set; }

        [FlatBufferItem(11)] public ChunkDataStorage Chunks { get; set; }

        [FlatBufferItem(12)] public Double[][] ElevationMap { get; set; }

        [FlatBufferItem(13)] public Boolean[][] RiverMap { get; set; }

        [FlatBufferItem(14)] public Boolean[][] RiverBorderMap { get; set; }

        [FlatBufferItem(15)] public List<WaterBorderLineStorage> BorderLines { get; set; }

        public void FillFrom(NamelessRogue.Engine.Generation.World.TimelineLayer component)
        {

            this.Age = component.Age;


            this.Civilizations = new List<CivilizationStorage>(component.Civilizations.Cast<CivilizationStorage>());

            this.Continents = new List<RegionStorage>(component.Continents.Cast<RegionStorage>());

            this.Islands = new List<RegionStorage>(component.Islands.Cast<RegionStorage>());

            this.Mountains = new List<RegionStorage>(component.Mountains.Cast<RegionStorage>());

            this.Forests = new List<RegionStorage>(component.Forests.Cast<RegionStorage>());

            this.Deserts = new List<RegionStorage>(component.Deserts.Cast<RegionStorage>());

            this.Swamps = new List<RegionStorage>(component.Swamps.Cast<RegionStorage>());

            this.Chunks = component.Chunks;

            this.ElevationMap = component.ElevationMap;

            this.RiverMap = component.RiverMap;

            this.RiverBorderMap = component.RiverBorderMap;

            this.BorderLines = new List<WaterBorderLineStorage>(component.BorderLines.Cast<WaterBorderLineStorage>());

        }

        public void FillTo(NamelessRogue.Engine.Generation.World.TimelineLayer component)
        {

            component.Age = this.Age;

            component.WorldTiles = new NamelessRogue.Engine.Generation.World.WorldTile[WorldTiles.GetLength(0), WorldTiles.GetLength(1)];

            for (int i = 0; i < component.WorldTiles.GetLength(0); i++)
            {
                for (int j = 0; j < component.WorldTiles.GetLength(1); j++)
                {
                    component.WorldTiles[i, j] = WorldTiles[i, j];
                }
            }

            component.Civilizations = new List<NamelessRogue.Engine.Generation.World.Civilization>(this.Civilizations.Cast<NamelessRogue.Engine.Generation.World.Civilization>());

            component.Continents = new List<NamelessRogue.Engine.Generation.World.Region>(this.Continents.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Islands = new List<NamelessRogue.Engine.Generation.World.Region>(this.Islands.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Mountains = new List<NamelessRogue.Engine.Generation.World.Region>(this.Mountains.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Forests = new List<NamelessRogue.Engine.Generation.World.Region>(this.Forests.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Deserts = new List<NamelessRogue.Engine.Generation.World.Region>(this.Deserts.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Swamps = new List<NamelessRogue.Engine.Generation.World.Region>(this.Swamps.Cast<NamelessRogue.Engine.Generation.World.Region>());

            component.Chunks = this.Chunks;

            component.ElevationMap = this.ElevationMap;

            component.RiverMap = this.RiverMap;

            component.RiverBorderMap = this.RiverBorderMap;

            component.BorderLines = new List<NamelessRogue.Engine.Generation.World.WaterBorderLine>(this.BorderLines.Cast<NamelessRogue.Engine.Generation.World.WaterBorderLine>());


        }

        public static implicit operator NamelessRogue.Engine.Generation.World.TimelineLayer(TimelineLayerStorage thisType)
        {
            NamelessRogue.Engine.Generation.World.TimelineLayer result = new NamelessRogue.Engine.Generation.World.TimelineLayer();
            thisType.FillTo(result);
            return result;
        }

        public static implicit operator TimelineLayerStorage(NamelessRogue.Engine.Generation.World.TimelineLayer component)
        {
            TimelineLayerStorage result = new TimelineLayerStorage();
            result.FillFrom(result);
            return result;
        }

    }

}