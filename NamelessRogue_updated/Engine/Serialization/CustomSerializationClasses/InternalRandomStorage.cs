
// AUTOGENERATED
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FlatSharp.Attributes;
using NamelessRogue.Engine.Serialization.SerializationIfrastructure;
using NamelessRogue.Engine.Serialization.CustomSerializationClasses;
using RogueSharp.Random;

namespace NamelessRogue.Engine.Serialization.AutogeneratedSerializationClasses
{
    [FlatBufferTable]
    public class InternalRandomStorage : IStorage<NamelessRogue.Engine.Utility.InternalRandom>
    {
        [FlatBufferItem(0)]  public string Id { get; set; }
        [FlatBufferItem(1)]  public string ParentEntityId { get; set; }

        [FlatBufferItem(3)] public IList<int> Seed { get; set; }

        [FlatBufferItem(4)] public long NumberGenerated { get; set; }
        public void FillFrom(NamelessRogue.Engine.Utility.InternalRandom component)
        {
            var state = component.Save();
            Seed = state.Seed;
            NumberGenerated = state.NumberGenerated;
        }

        public void FillTo(NamelessRogue.Engine.Utility.InternalRandom component)
        {
            var state = new RandomState();
            state.Seed = Seed.ToArray();
            state.NumberGenerated = NumberGenerated;
            component.Restore(state);
        }

        public static implicit operator NamelessRogue.Engine.Utility.InternalRandom (InternalRandomStorage thisType)
        {
            if (thisType == null) { return null; }
            NamelessRogue.Engine.Utility.InternalRandom result = new NamelessRogue.Engine.Utility.InternalRandom();
            thisType.FillTo(result);
            return result;
        }

        public static implicit operator InternalRandomStorage (NamelessRogue.Engine.Utility.InternalRandom  component)
        {
            if (component == null) { return null; }
            InternalRandomStorage result = new InternalRandomStorage();
            result.FillFrom(component);
            return result;
        }

    }

}